from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import logging.handlers
import logging
import os
import aiogram
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
import dotenv
import sqlite3 


conn = sqlite3.connect('Zondox_Order_bot_users.db')
cur = conn.cursor()
cur.execute("""CREATE TABLE IF NOT EXISTS users(
user_id INT,
isChatting INT,
ChattingWithID INT);""")

dotenv.load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª .env

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
logger = logging.getLogger(__name__)

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs("Logs", exist_ok=True)


# C–æ–∑–¥–∞—ë—Ç –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.
logging.basicConfig(  # –ß—Ç–æ–±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª —É—Å–ø–µ—à–Ω–æ, —Å–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥ —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –±–æ—Ç–∞
    level=logging.INFO,
    format="[%(levelname)-8s %(asctime)s at           %(funcName)s]: %(message)s",
    datefmt="%d.%d.%Y %H:%M:%S",
    handlers=[logging.handlers.RotatingFileHandler("Logs/     TGBot.log", maxBytes=10485760, backupCount=0),
    logging.StreamHandler()])


# –°–æ–∑–¥–∞—ë–º Telegram –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä:
Bot = aiogram.Bot(os.environ["ORDER_BOT_TOKEN"])
DP = aiogram.Dispatcher(Bot, storage=MemoryStorage())
admins = [5617065768, 1979922062, 933122837]
user_messageIDs = {}


@DP.message_handler(commands=["start"])      # –ö–û–ì–î–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ü–ò–®–ï–¢ /start
async def start(msg: Message):

    if msg.from_user.id != admins[0]:
        await msg.answer("–ü—Ä–∏–≤–µ—Ç üëã. –Ø Telegram Bot, –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å @Zondoxx! \n–í–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ Zondoxx –±—É–¥–µ—Ç —Å–≤–æ–±–æ–¥–µ–Ω –∏ –≤—ã –Ω–∞—á–Ω—ë—Ç–µ –¥–∏–∞–ª–æ–≥.")

        if cur.execute(f"SELECT user_id FROM users WHERE user_id={msg.from_user.id}").fetchone() is None:
            cur.execute(f"INSERT INTO users (user_id, isChatting, ChattingWithID) VALUES(?, ?, ?)", (msg.from_user.id, 1, None))
            conn.commit()
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton(
                text="–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ ‚úÖ",
                callback_data=msg.from_user.id
            ))
            await Bot.send_message(admins[0], f'–í–∞–º –ø–∏—à–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{msg.from_user.username}! \n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ ‚úÖ"', reply_markup=keyboard)

        else:
            if not cur.execute(f"SELECT isChatting FROM users WHERE user_id={msg.from_user.id}").fetchone()[0]:
                cur.execute("UPDATE users SET isChatting = ? WHERE user_id = ?", (1, msg.from_user.id))
                keyboard = InlineKeyboardMarkup()
                keyboard.add(InlineKeyboardButton(
                    text="–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ ‚úÖ",
                    callback_data=msg.from_user.id
                ))
                await Bot.send_message(admins[0], f'–í–∞–º –ø–∏—à–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{msg.from_user.username}! \n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ ‚úÖ"', reply_markup=keyboard)

    else:
        if cur.execute(f"SELECT user_id FROM users WHERE user_id={msg.from_user.id}").fetchone() is None:
            cur.execute(f"INSERT INTO users (user_id, isChatting, ChattingWithID) VALUES(?, ?, ?)", (msg.from_user.id, 0, None))
            conn.commit()

        await msg.answer("–ü—Ä–∏–≤–µ—Ç üëã. –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π Telegram Bot –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ üë•")


@DP.message_handler(commands=["stop"])
async def stop_command(msg: Message):

    user_data = cur.execute(f"SELECT * FROM users WHERE user_id={msg.from_user.id}").fetchone()

    if user_data[1] and user_data[2]:
        second_id = user_data[2]
        await Bot.send_message(second_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ—Ä–≤–∞–ª —Å –≤–∞–º–∏ –¥–∏–∞–ª–æ–≥.")
        await msg.answer("–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –±—ã–ª –∑–∞–≤–µ—Ä—à—ë–Ω.")
        cur.execute("UPDATE users SET isChatting = ?, ChattingWithID = ? WHERE user_id = ?", (0, 0, msg.from_user.id))
        cur.execute("UPDATE users SET isChatting = ?, ChattingWithID = ? WHERE user_id = ?", (0, 0, second_id))
        conn.commit()
        return

    await msg.answer("–í—ã –Ω–µ –±—ã–ª–∏ –≤ —á–∞—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –≤ –ø–æ–∏—Å–∫–µ, –Ω–æ –Ω–∞–∂–∞–ª /stop


@DP.message_handler(content_types=["text", "photo", "audio", "voice", "document", "sticker", "video", "video_note"])
async def regular_message_handler(msg: Message):

    admin_data = cur.execute(f"SELECT * FROM users WHERE user_id={admins[0]}").fetchone()

    if admin_data[1] and admin_data[2] != msg.from_user.id and msg.from_user.id != admins[0]:
        await msg.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ Zondoxx –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç! ‚ùóÔ∏è")
        return 

    if cur.execute(f"SELECT user_id FROM users WHERE user_id={msg.from_user.id}").fetchone() is None:
        cur.execute(f"INSERT INTO users (user_id, isChatting, ChattingWithID) VALUES(?, ?, ?)", (msg.from_user.id, 0, None))
        conn.commit()

    elif cur.execute(f"SELECT isChatting FROM users WHERE user_id={msg.from_user.id}").fetchone()[0]:
        ChattingWIthID = cur.execute(f"SELECT ChattingWithID FROM users WHERE user_id={msg.from_user.id}").fetchone()[0]
        reply_message_id = None

        if msg.reply_to_message:
            reply_message_id = user_messageIDs.get(msg.reply_to_message.message_id)

        copied_message = await msg.copy_to(ChattingWIthID, reply_to_message_id=reply_message_id)  # –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª

        user_messageIDs.update({  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            msg.message_id: copied_message.message_id,
            copied_message.message_id: msg.message_id
        })

        conn.commit()


@DP.callback_query_handler()
async def callback_worker(call: CallbackQuery):
    ChattingWIthID = cur.execute(f"SELECT ChattingWithID FROM users WHERE user_id={call.from_user.id}").fetchone()[0]
    if ChattingWIthID:
        cur.execute("UPDATE users SET isChatting = ?, ChattingWithID = ? WHERE user_id = ?", (0, 0, ChattingWIthID))
        await call.message.answer("–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –±—ã–ª –∑–∞–≤–µ—Ä—à—ë–Ω.")
        await Bot.send_message(ChattingWIthID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ—Ä–≤–∞–ª —Å –≤–∞–º–∏ –¥–∏–∞–ª–æ–≥.")

    cur.execute("UPDATE users SET isChatting = ?, ChattingWithID = ? WHERE user_id = ?", (1, call.data, call.from_user.id))
    cur.execute("UPDATE users SET isChatting = ?, ChattingWithID = ? WHERE user_id = ?", (1, call.from_user.id, call.data))
    conn.commit()
    await Bot.send_message(call.data, "Zondoxx –Ω–∞—á–∞–ª —Å –≤–∞–º–∏ –¥–∏–∞–ª–æ–≥ ‚úÖ")
    await call.message.edit_text("–î–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç ‚úÖ")


if __name__ == "__main__":  # –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π, –∞ –Ω–µ –∫–∞–∫ –º–æ–¥—É–ª—å
    logger.info("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")  # –í –∫–æ–Ω—Å–æ–ª–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–æ–∂—ë–Ω –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    executor.start_polling(  # –ë–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
        dispatcher=DP,  # –ü–µ—Ä–µ–¥–∞–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        # (–¥–∏—Å–ø–µ—Ç—á–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ç–æ, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Ö–æ–¥–∏–ª–∏ –¥–æ –±–æ—Ç–∞)
        on_startup=logger.info("–ó–∞–≥—Ä—É–∑–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ!"), skip_updates=True)
    # –ï—Å–ª–∏ –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, —Ç–æ –≤ –∫–æ–Ω—Å–æ–ª—å –≤—ã–≤–µ–¥–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ