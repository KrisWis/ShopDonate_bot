from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
import logging.handlers
import logging
import os
import aiogram
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import StatesGroup, State
import dotenv
import keyboards
import re
from datetime import datetime
import sqlite3 


conn = sqlite3.connect('Zondox_Donate_bot_users.db')
cur = conn.cursor()
cur.execute("""CREATE TABLE IF NOT EXISTS users(
username TEXT,
balance INT,
referrer_id INT);""")


dotenv.load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª .env

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
logger = logging.getLogger(__name__)

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs("Logs", exist_ok=True)


# C–æ–∑–¥–∞—ë—Ç –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.
logging.basicConfig(  # –ß—Ç–æ–±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª —É—Å–ø–µ—à–Ω–æ, —Å–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥ —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –±–æ—Ç–∞
    level=logging.INFO,
    format="[%(levelname)-8s %(asctime)s at           %(funcName)s]: %(message)s",
    datefmt="%d.%d.%Y %H:%M:%S",
    handlers=[logging.handlers.RotatingFileHandler("Logs/     TGBot.log", maxBytes=10485760, backupCount=0),
    logging.StreamHandler()])


# –°–æ–∑–¥–∞—ë–º Telegram –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä:
Bot = aiogram.Bot(os.environ["DONATE_BOT_TOKEN"])
DP = aiogram.Dispatcher(Bot, storage=MemoryStorage())

items = {'Brawl stars ‚≠êÔ∏è': keyboards.brawlStars_choose_item, 'Brawl stars (–º–æ–¥) üåü': keyboards.brawlStars_mod_choose_item, 
'Clash Royale üëë': keyboards.clashRoyale_choose_item, 'Clash of clans üî®': keyboards.clashOfClans_choose_item, 'Roblox üë§': keyboards.roblox_choose_item}
admins = [5617065768, 1979922062, 933122837]


class UserState(StatesGroup):  # –°–æ–∑–¥–∞—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    referral = State() 
    email = State()
    withdrawal = State()
    

@DP.message_handler(commands=["start"], state="*")      # –ö–û–ì–î–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ü–ò–®–ï–¢ /start
async def start(msg: Message, state: FSMContext):
    
    if cur.execute(f"SELECT username FROM users WHERE username='{msg.from_user.username}'").fetchone() is None:
        referrer_id = msg.text[7:]
        if referrer_id and referrer_id != str(msg.from_user.id):
            cur.execute(f"INSERT INTO users ('username', 'balance', 'referrer_id') VALUES(?, ?, ?)",(msg.from_user.username, 0, referrer_id))
            conn.commit()
            await Bot.send_message(int(referrer_id), f"–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{msg.from_user.username} ‚úÖ")
        else:
            cur.execute(f"INSERT INTO users ('username', 'balance') VALUES(?, ?)",(msg.from_user.username, 0))
            conn.commit()

    await msg.answer("""–ü—Ä–∏–≤–µ—Ç, –≤ —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã  –º–æ–∂–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ–Ω–∞—Ç –æ—Ç Zondox'a –≤ –∏–≥—Ä—ã –æ—Ç Supercell –∏ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ —Å–∞–º—ã–º –Ω–∏–∑–∫–∏–º —Ü–µ–Ω–∞–º! üåü

–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å/–ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, –∂–º–∏ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§"
–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –∂–º–∏ "–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å üõí"

–£–¥–∞—á–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫! ‚ù§Ô∏è‚Äçüî•""",
    reply_markup=keyboards.start_keyboard)
    await state.finish()
    

@DP.message_handler()
async def ReplyKeyboard_handling(msg: Message, state: FSMContext):

    if msg.text == '–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å üõí':
        await msg.answer("–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—å:",
        reply_markup=keyboards.choose_game)

    elif msg.text == '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§':
        user_balance = cur.execute(f"SELECT * FROM users WHERE username='{msg.from_user.username}'").fetchone()[1]
        referrers_amount = cur.execute(f"SELECT COUNT(username) as count FROM users WHERE referrer_id = {msg.from_user.id}").fetchone()[0]
        await msg.answer(f'–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} –∑–æ–Ω–¥–∏–∫–æ–∏–Ω–æ–≤ ({user_balance}‚ÇΩ) \
        \n–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/{os.environ["BOT_NICKNAME"]}?start={msg.from_user.id}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrers_amount}', reply_markup=keyboards.withdrawal_keyboard)

    elif msg.text == 'Brawl stars (–º–æ–¥) üåü':
        await msg.answer("‚ùóÔ∏è–ü–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π –≥–µ–º–æ–≤ —á–µ—Ä–µ–∑ –º–æ–¥ –æ–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ ‚ùóÔ∏è \n\n- –¢—ã —Å–º–æ–∂–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –æ–¥–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–º–æ–≤ –Ω–∞ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç —Ç–æ–ª—å–∫–æ –µ–¥–∏–Ω–æ–∂–¥—ã. \
        \n- –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∏—Å–∫–∏ —Ç—ã –±–µ—Ä–µ—à—å –Ω–∞ —Å–µ–±—è.", reply_markup=keyboards.brawl_stars_mod_alert)

    elif msg.text in ['Brawl stars ‚≠êÔ∏è', 'Clash of clans üî®', 'Clash Royale üëë', 'Roblox üë§', '–Ø –ø—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è ‚úÖ']:
        photo = open("{}_prices.png".format(re.sub(' +', '_', msg.text) if msg.text != '–Ø –ø—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è ‚úÖ' else "Brawl_stars_(–º–æ–¥)_üåü"), "rb")
        await Bot.send_photo(chat_id=msg.from_user.id, photo=photo, caption="–í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏:", reply_markup=items[msg.text if msg.text != '–Ø –ø—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è ‚úÖ' else 'Brawl stars (–º–æ–¥) üåü'])

    elif msg.text == 'Hay day üêì':
        await msg.answer("–ü–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –±–æ—Ç–µ, –ø–æ—ç—Ç–æ–º—É –∑–∞ –ø–æ–∫—É–ø–∫–æ–π –ø–∏—à–∏—Ç–µ –≤ –ª—Å @ZondoxOrderBot üîÖ")

    elif "–≥–µ–º–æ–≤" in msg.text or "–∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤" in msg.text or "—Ä–æ–±—É–∫—Å–æ–≤" in msg.text or msg.text in ["üí´ –ü–∞—Å—Å —Ä–æ—è–ª—å - 279‚ÇΩ", "üí´ –ó–æ–ª–æ—Ç–æ–π –ø—Ä–æ–ø—É—Å–∫ - 279‚ÇΩ"]:
        await state.update_data(price=int(msg.text.split()[-1][:-1]))
        await state.update_data(item=msg.text)
        await msg.answer('–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã —É–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞? –ï—Å–ª–∏ –¥–∞, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @user, –∏–Ω–∞—á–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è©".', reply_markup=keyboards.skip_keyboard)
        await UserState.referral.set()

    elif msg.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è©":
        await msg.answer("–£–∫–∞–∂–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.", reply_markup=ReplyKeyboardRemove())

    elif msg.text in ["–†–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏ üíµ", "–ó–æ–Ω–¥–∏–∫–æ–∏–Ω—ã üßø"]:
        data = await state.get_data()
        user_balance = cur.execute("SELECT balance FROM users WHERE username = ?", (msg.from_user.username,)).fetchone()[0]

        if user_balance >= data["price"] and msg.text == "–ó–æ–Ω–¥–∏–∫–æ–∏–Ω—ã üßø" or msg.text == "–†–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏ üíµ":

            if msg.text == "–ó–æ–Ω–¥–∏–∫–æ–∏–Ω—ã üßø":
                cur.execute("UPDATE users SET balance = ? WHERE username = ?", (user_balance - data["price"], msg.from_user.username))
                conn.commit()

            await msg.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞–º–∏ –Ω–∞ @proximabits. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –±–æ—Ç–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å Zondoxx - @ZondoxOrderBot", reply_markup=ReplyKeyboardRemove())
            await Bot.send_message(93312286262624642642327, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{msg.from_user.username} —Å–¥–µ–ª–∞–ª –∑–∞–∫–∞–∑ \n–¢–æ–≤–∞—Ä: {data["item"]} \n–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {datetime.now().strftime("%H:%M")} \
            \n–†–µ—Ñ–µ—Ä–∞–ª: {data["referral"]} \n–ü–æ—á—Ç–∞: {data["email"]}')
            await state.finish()

        else:
            await msg.answer("–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏! ‚ùå")

    elif msg.text.startswith("/add"):
        user = msg.text.split()[1][1:]
        if cur.execute(f"SELECT username FROM users WHERE username='{user}'").fetchone() is None:
            await msg.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö! ‚ùå")
        else:
            amount = int(msg.text.split()[2])
            user_balance = cur.execute("SELECT balance FROM users WHERE username = ?", (user,)).fetchone()[0]
            cur.execute("UPDATE users SET balance = ? WHERE username = ?", (user_balance + amount, user))
            conn.commit()
            await msg.answer(f"–ù–∞ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user} –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} –∑–æ–Ω–¥–∏–∫–æ–∏–Ω–æ–≤ ‚úÖ")


@DP.callback_query_handler()
async def callback_worker(call: CallbackQuery):
    if call.data == "–í—ã–≤–µ—Å—Ç–∏ –∑–æ–Ω–¥–∫–æ–∏–Ω—ã":
        await call.message.edit_text("–ö–∞–∫—É—é —Å—É–º–º—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏?")
        await UserState.withdrawal.set()


@DP.message_handler(state=UserState.withdrawal)  # –ö–æ–≥–¥–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å withdrawal
async def withdrawal(msg: Message, state: FSMContext):
    withdrawal = int(msg.text)
    user_balance = cur.execute("SELECT balance FROM users WHERE username = ?", (msg.from_user.username,)).fetchone()[0]
    if user_balance >= withdrawal:
        cur.execute("UPDATE users SET balance = ? WHERE username = ?", (user_balance - withdrawal, msg.from_user.username))
        conn.commit()
        await msg.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{msg.from_user.username} \n–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {datetime.now().strftime("%H:%M")} \n–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {withdrawal} –∑–æ–Ω–¥–∏–∫–æ–∏–Ω–æ–≤. \
        \n–ù–∞–ø–∏—à–∏—Ç–µ –≤ –±–æ—Ç–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å Zondoxx - @ZondoxOrderBot')
        await Bot.send_message(933122832522642646427, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{msg.from_user.username} —Å–¥–µ–ª–∞–ª –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤. \n–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {datetime.now().strftime("%H:%M")}  \
        \n–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {withdrawal} –∑–æ–Ω–¥–∏–∫–æ–∏–Ω–æ–≤.')
        await state.finish()
    else:
        await msg.answer("–£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–Ω–¥–∏–∫–æ–∏–Ω–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤! ‚ùå \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@DP.message_handler(state=UserState.referral)  # –ö–æ–≥–¥–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å referral
async def adding_referral(msg: Message, state: FSMContext):

    if msg.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è©":
        await state.update_data(referral="–ù–µ —É–∫–∞–∑–∞–Ω.")
        await msg.answer("–£–∫–∞–∂–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.", reply_markup=ReplyKeyboardRemove())
    else:
        await state.update_data(referral=msg.text)
        await msg.answer("–†–µ—Ñ–µ—Ä–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω! ‚úÖ\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.", reply_markup=ReplyKeyboardRemove())
    
    await UserState.email.set()


@DP.message_handler(state=UserState.email)  # –ö–æ–≥–¥–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å email
async def adding_email(msg: Message, state: FSMContext):

    await state.update_data(email=msg.text)
    await msg.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã?", reply_markup=keyboards.choose_payment)
    await state.reset_state(with_data=False)


if __name__ == "__main__":  # –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π, –∞ –Ω–µ –∫–∞–∫ –º–æ–¥—É–ª—å
    logger.info("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")  # –í –∫–æ–Ω—Å–æ–ª–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–æ–∂—ë–Ω –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    executor.start_polling(  # –ë–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
        dispatcher=DP,  # –ü–µ—Ä–µ–¥–∞–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        # (–¥–∏—Å–ø–µ—Ç—á–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ç–æ, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Ö–æ–¥–∏–ª–∏ –¥–æ –±–æ—Ç–∞)
        on_startup=logger.info("–ó–∞–≥—Ä—É–∑–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ!"), skip_updates=True)
    # –ï—Å–ª–∏ –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, —Ç–æ –≤ –∫–æ–Ω—Å–æ–ª—å –≤—ã–≤–µ–¥–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ